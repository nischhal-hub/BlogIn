import { ESLintUtils, AST_NODE_TYPES } from "@typescript-eslint/utils";
import { ASTUtils } from "../../utils/ast-utils.js";
import { getDocsUrl } from "../../utils/get-docs-url.js";
import { uniqueBy } from "../../utils/unique-by.js";
import { detectTanstackQueryImports } from "../../utils/detect-react-query-imports.js";
import { ExhaustiveDepsUtils } from "./exhaustive-deps.utils.js";
const QUERY_KEY = "queryKey";
const QUERY_FN = "queryFn";
const name = "exhaustive-deps";
const createRule = ESLintUtils.RuleCreator(getDocsUrl);
const rule = createRule({
  name,
  meta: {
    type: "problem",
    docs: {
      description: "Exhaustive deps rule for useQuery",
      recommended: "error"
    },
    messages: {
      missingDeps: `The following dependencies are missing in your queryKey: {{deps}}`,
      fixTo: "Fix to {{result}}"
    },
    hasSuggestions: true,
    fixable: "code",
    schema: []
  },
  defaultOptions: [],
  create: detectTanstackQueryImports((context) => {
    return {
      Property: (node) => {
        if (!ASTUtils.isObjectExpression(node.parent) || !ASTUtils.isIdentifierWithName(node.key, QUERY_KEY)) {
          return;
        }
        const scopeManager = context.sourceCode.scopeManager;
        const queryKey = ASTUtils.findPropertyWithIdentifierKey(
          node.parent.properties,
          QUERY_KEY
        );
        const queryFn = ASTUtils.findPropertyWithIdentifierKey(
          node.parent.properties,
          QUERY_FN
        );
        if (scopeManager === null || queryKey === void 0 || queryFn === void 0 || !ASTUtils.isNodeOfOneOf(queryFn.value, [
          AST_NODE_TYPES.ArrowFunctionExpression,
          AST_NODE_TYPES.FunctionExpression
        ])) {
          return;
        }
        let queryKeyNode = queryKey.value;
        if (queryKeyNode.type === AST_NODE_TYPES.TSAsExpression && queryKeyNode.expression.type === AST_NODE_TYPES.ArrayExpression) {
          queryKeyNode = queryKeyNode.expression;
        }
        if (queryKeyNode.type === AST_NODE_TYPES.Identifier) {
          const expression = ASTUtils.getReferencedExpressionByIdentifier({
            context,
            node: queryKeyNode
          });
          if ((expression == null ? void 0 : expression.type) === AST_NODE_TYPES.ArrayExpression) {
            queryKeyNode = expression;
          }
        }
        const queryKeyValue = queryKeyNode;
        const externalRefs = ASTUtils.getExternalRefs({
          scopeManager,
          sourceCode: context.sourceCode,
          node: queryFn.value
        });
        const relevantRefs = externalRefs.filter(
          (reference) => ExhaustiveDepsUtils.isRelevantReference({
            context,
            reference,
            scopeManager
          })
        );
        const existingKeys = ASTUtils.getNestedIdentifiers(queryKeyValue).map(
          (identifier) => ASTUtils.mapKeyNodeToText(identifier, context.sourceCode)
        );
        const missingRefs = relevantRefs.map((ref) => ({
          ref,
          text: ASTUtils.mapKeyNodeToText(ref.identifier, context.sourceCode)
        })).filter(({ ref, text }) => {
          return !ref.isTypeReference && !ASTUtils.isAncestorIsCallee(ref.identifier) && !existingKeys.some((existingKey) => existingKey === text) && !existingKeys.includes(text.split(".")[0] ?? "");
        }).map(({ ref, text }) => ({
          identifier: ref.identifier,
          text
        }));
        const uniqueMissingRefs = uniqueBy(missingRefs, (x) => x.text);
        if (uniqueMissingRefs.length > 0) {
          const missingAsText = uniqueMissingRefs.map(
            (ref) => ASTUtils.mapKeyNodeToText(ref.identifier, context.sourceCode)
          ).join(", ");
          const existingWithMissing = context.sourceCode.getText(queryKeyValue).replace(/\]$/, `, ${missingAsText}]`);
          const suggestions = [];
          if (queryKeyNode.type === AST_NODE_TYPES.ArrayExpression) {
            suggestions.push({
              messageId: "fixTo",
              data: { result: existingWithMissing },
              fix(fixer) {
                return fixer.replaceText(queryKeyValue, existingWithMissing);
              }
            });
          }
          context.report({
            node,
            messageId: "missingDeps",
            data: {
              deps: uniqueMissingRefs.map((ref) => ref.text).join(", ")
            },
            suggest: suggestions
          });
        }
      }
    };
  })
});
export {
  name,
  rule
};
//# sourceMappingURL=exhaustive-deps.rule.js.map
