"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const utils = require("@typescript-eslint/utils");
const astUtils = require("../../utils/ast-utils.cjs");
const ExhaustiveDepsUtils = {
  isRelevantReference(params) {
    const { reference, scopeManager, context } = params;
    const component = astUtils.ASTUtils.getFunctionAncestor(context);
    if (component !== void 0 && !astUtils.ASTUtils.isDeclaredInNode({
      scopeManager,
      reference,
      functionNode: component
    })) {
      return false;
    }
    return reference.identifier.name !== "undefined" && reference.identifier.parent.type !== utils.AST_NODE_TYPES.NewExpression && !ExhaustiveDepsUtils.isInstanceOfKind(reference.identifier.parent) && !ExhaustiveDepsUtils.isQueryClientReference(reference);
  },
  isInstanceOfKind(node) {
    return node.type === utils.AST_NODE_TYPES.BinaryExpression && node.operator === "instanceof";
  },
  isQueryClientReference(reference) {
    var _a, _b, _c;
    const declarator = (_b = (_a = reference.resolved) == null ? void 0 : _a.defs[0]) == null ? void 0 : _b.node;
    return (declarator == null ? void 0 : declarator.type) === utils.AST_NODE_TYPES.VariableDeclarator && ((_c = declarator.init) == null ? void 0 : _c.type) === utils.AST_NODE_TYPES.CallExpression && declarator.init.callee.type === utils.AST_NODE_TYPES.Identifier && declarator.init.callee.name === "useQueryClient";
  }
};
exports.ExhaustiveDepsUtils = ExhaustiveDepsUtils;
//# sourceMappingURL=exhaustive-deps.utils.cjs.map
