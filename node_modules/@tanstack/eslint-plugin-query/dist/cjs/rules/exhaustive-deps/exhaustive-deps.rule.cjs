"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const utils = require("@typescript-eslint/utils");
const astUtils = require("../../utils/ast-utils.cjs");
const getDocsUrl = require("../../utils/get-docs-url.cjs");
const uniqueBy = require("../../utils/unique-by.cjs");
const detectReactQueryImports = require("../../utils/detect-react-query-imports.cjs");
const exhaustiveDeps_utils = require("./exhaustive-deps.utils.cjs");
const QUERY_KEY = "queryKey";
const QUERY_FN = "queryFn";
const name = "exhaustive-deps";
const createRule = utils.ESLintUtils.RuleCreator(getDocsUrl.getDocsUrl);
const rule = createRule({
  name,
  meta: {
    type: "problem",
    docs: {
      description: "Exhaustive deps rule for useQuery",
      recommended: "error"
    },
    messages: {
      missingDeps: `The following dependencies are missing in your queryKey: {{deps}}`,
      fixTo: "Fix to {{result}}"
    },
    hasSuggestions: true,
    fixable: "code",
    schema: []
  },
  defaultOptions: [],
  create: detectReactQueryImports.detectTanstackQueryImports((context) => {
    return {
      Property: (node) => {
        if (!astUtils.ASTUtils.isObjectExpression(node.parent) || !astUtils.ASTUtils.isIdentifierWithName(node.key, QUERY_KEY)) {
          return;
        }
        const scopeManager = context.sourceCode.scopeManager;
        const queryKey = astUtils.ASTUtils.findPropertyWithIdentifierKey(
          node.parent.properties,
          QUERY_KEY
        );
        const queryFn = astUtils.ASTUtils.findPropertyWithIdentifierKey(
          node.parent.properties,
          QUERY_FN
        );
        if (scopeManager === null || queryKey === void 0 || queryFn === void 0 || !astUtils.ASTUtils.isNodeOfOneOf(queryFn.value, [
          utils.AST_NODE_TYPES.ArrowFunctionExpression,
          utils.AST_NODE_TYPES.FunctionExpression
        ])) {
          return;
        }
        let queryKeyNode = queryKey.value;
        if (queryKeyNode.type === utils.AST_NODE_TYPES.TSAsExpression && queryKeyNode.expression.type === utils.AST_NODE_TYPES.ArrayExpression) {
          queryKeyNode = queryKeyNode.expression;
        }
        if (queryKeyNode.type === utils.AST_NODE_TYPES.Identifier) {
          const expression = astUtils.ASTUtils.getReferencedExpressionByIdentifier({
            context,
            node: queryKeyNode
          });
          if ((expression == null ? void 0 : expression.type) === utils.AST_NODE_TYPES.ArrayExpression) {
            queryKeyNode = expression;
          }
        }
        const queryKeyValue = queryKeyNode;
        const externalRefs = astUtils.ASTUtils.getExternalRefs({
          scopeManager,
          sourceCode: context.sourceCode,
          node: queryFn.value
        });
        const relevantRefs = externalRefs.filter(
          (reference) => exhaustiveDeps_utils.ExhaustiveDepsUtils.isRelevantReference({
            context,
            reference,
            scopeManager
          })
        );
        const existingKeys = astUtils.ASTUtils.getNestedIdentifiers(queryKeyValue).map(
          (identifier) => astUtils.ASTUtils.mapKeyNodeToText(identifier, context.sourceCode)
        );
        const missingRefs = relevantRefs.map((ref) => ({
          ref,
          text: astUtils.ASTUtils.mapKeyNodeToText(ref.identifier, context.sourceCode)
        })).filter(({ ref, text }) => {
          return !ref.isTypeReference && !astUtils.ASTUtils.isAncestorIsCallee(ref.identifier) && !existingKeys.some((existingKey) => existingKey === text) && !existingKeys.includes(text.split(".")[0] ?? "");
        }).map(({ ref, text }) => ({
          identifier: ref.identifier,
          text
        }));
        const uniqueMissingRefs = uniqueBy.uniqueBy(missingRefs, (x) => x.text);
        if (uniqueMissingRefs.length > 0) {
          const missingAsText = uniqueMissingRefs.map(
            (ref) => astUtils.ASTUtils.mapKeyNodeToText(ref.identifier, context.sourceCode)
          ).join(", ");
          const existingWithMissing = context.sourceCode.getText(queryKeyValue).replace(/\]$/, `, ${missingAsText}]`);
          const suggestions = [];
          if (queryKeyNode.type === utils.AST_NODE_TYPES.ArrayExpression) {
            suggestions.push({
              messageId: "fixTo",
              data: { result: existingWithMissing },
              fix(fixer) {
                return fixer.replaceText(queryKeyValue, existingWithMissing);
              }
            });
          }
          context.report({
            node,
            messageId: "missingDeps",
            data: {
              deps: uniqueMissingRefs.map((ref) => ref.text).join(", ")
            },
            suggest: suggestions
          });
        }
      }
    };
  })
});
exports.name = name;
exports.rule = rule;
//# sourceMappingURL=exhaustive-deps.rule.cjs.map
