{"version":3,"file":"stable-query-client.rule.cjs","sources":["../../../../src/rules/stable-query-client/stable-query-client.rule.ts"],"sourcesContent":["import { AST_NODE_TYPES, ESLintUtils } from '@typescript-eslint/utils'\nimport { ASTUtils } from '../../utils/ast-utils'\nimport { getDocsUrl } from '../../utils/get-docs-url'\nimport { detectTanstackQueryImports } from '../../utils/detect-react-query-imports'\nimport type { TSESLint } from '@typescript-eslint/utils'\n\nexport const name = 'stable-query-client'\n\nconst createRule = ESLintUtils.RuleCreator(getDocsUrl)\n\nexport const rule = createRule({\n  name,\n  meta: {\n    type: 'problem',\n    docs: {\n      description: 'Makes sure that QueryClient is stable',\n      recommended: 'error' as any,\n    },\n    messages: {\n      unstable: [\n        'QueryClient is not stable. It should be either extracted from the component or wrapped in React.useState.',\n        'See https://tkdodo.eu/blog/react-query-fa-qs#2-the-queryclient-is-not-stable',\n      ].join('\\n'),\n      fixTo: 'Fix to {{result}}',\n    },\n    hasSuggestions: true,\n    fixable: 'code',\n    schema: [],\n  },\n  defaultOptions: [],\n\n  create: detectTanstackQueryImports((context, _, helpers) => {\n    return {\n      NewExpression: (node) => {\n        if (\n          node.callee.type !== AST_NODE_TYPES.Identifier ||\n          node.callee.name !== 'QueryClient' ||\n          node.parent.type !== AST_NODE_TYPES.VariableDeclarator ||\n          !helpers.isSpecificTanstackQueryImport(\n            node.callee,\n            '@tanstack/react-query',\n          )\n        ) {\n          return\n        }\n\n        const fnAncestor = ASTUtils.getFunctionAncestor(context)\n        const isReactServerComponent = fnAncestor?.async === true\n\n        if (\n          !ASTUtils.isValidReactComponentOrHookName(fnAncestor?.id) ||\n          isReactServerComponent\n        ) {\n          return\n        }\n\n        context.report({\n          node: node.parent,\n          messageId: 'unstable',\n          fix: (() => {\n            const { parent } = node\n\n            if (parent.id.type !== AST_NODE_TYPES.Identifier) {\n              return\n            }\n\n            const nodeText = context.getSourceCode().getText(node)\n            const variableName = parent.id.name\n\n            return (fixer: TSESLint.RuleFixer) => {\n              return fixer.replaceTextRange(\n                [parent.range[0], parent.range[1]],\n                `[${variableName}] = React.useState(() => ${nodeText})`,\n              )\n            }\n          })(),\n        })\n      },\n    }\n  }),\n})\n"],"names":["ESLintUtils","getDocsUrl","detectTanstackQueryImports","AST_NODE_TYPES","ASTUtils"],"mappings":";;;;;;AAMO,MAAM,OAAO;AAEpB,MAAM,aAAaA,MAAY,YAAA,YAAYC,WAAAA,UAAU;AAE9C,MAAM,OAAO,WAAW;AAAA,EAC7B;AAAA,EACA,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,MAAM;AAAA,MACJ,aAAa;AAAA,MACb,aAAa;AAAA,IACf;AAAA,IACA,UAAU;AAAA,MACR,UAAU;AAAA,QACR;AAAA,QACA;AAAA,MAAA,EACA,KAAK,IAAI;AAAA,MACX,OAAO;AAAA,IACT;AAAA,IACA,gBAAgB;AAAA,IAChB,SAAS;AAAA,IACT,QAAQ,CAAC;AAAA,EACX;AAAA,EACA,gBAAgB,CAAC;AAAA,EAEjB,QAAQC,wBAAAA,2BAA2B,CAAC,SAAS,GAAG,YAAY;AACnD,WAAA;AAAA,MACL,eAAe,CAAC,SAAS;AACvB,YACE,KAAK,OAAO,SAASC,MAAA,eAAe,cACpC,KAAK,OAAO,SAAS,iBACrB,KAAK,OAAO,SAASA,MAAe,eAAA,sBACpC,CAAC,QAAQ;AAAA,UACP,KAAK;AAAA,UACL;AAAA,QAAA,GAEF;AACA;AAAA,QACF;AAEM,cAAA,aAAaC,SAAAA,SAAS,oBAAoB,OAAO;AACjD,cAAA,0BAAyB,yCAAY,WAAU;AAErD,YACE,CAACA,SAAS,SAAA,gCAAgC,yCAAY,EAAE,KACxD,wBACA;AACA;AAAA,QACF;AAEA,gBAAQ,OAAO;AAAA,UACb,MAAM,KAAK;AAAA,UACX,WAAW;AAAA,UACX,MAAM,MAAM;AACJ,kBAAA,EAAE,OAAW,IAAA;AAEnB,gBAAI,OAAO,GAAG,SAASD,MAAAA,eAAe,YAAY;AAChD;AAAA,YACF;AAEA,kBAAM,WAAW,QAAQ,cAAc,EAAE,QAAQ,IAAI;AAC/C,kBAAA,eAAe,OAAO,GAAG;AAE/B,mBAAO,CAAC,UAA8B;AACpC,qBAAO,MAAM;AAAA,gBACX,CAAC,OAAO,MAAM,CAAC,GAAG,OAAO,MAAM,CAAC,CAAC;AAAA,gBACjC,IAAI,YAAY,4BAA4B,QAAQ;AAAA,cAAA;AAAA,YACtD;AAAA,UACF,GACC;AAAA,QAAA,CACJ;AAAA,MACH;AAAA,IAAA;AAAA,EACF,CACD;AACH,CAAC;;;"}