import {
  require_react_dom
} from "./chunk-FUOFC43Q.js";
import {
  require_react
} from "./chunk-UGXRNFSO.js";
import {
  __commonJS
} from "./chunk-7TNKEIRG.js";

// node_modules/use-ssr/dist/useSSR.js
var require_useSSR = __commonJS({
  "node_modules/use-ssr/dist/useSSR.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var Device;
    (function(Device2) {
      Device2["Browser"] = "browser";
      Device2["Server"] = "server";
      Device2["Native"] = "native";
    })(Device = exports.Device || (exports.Device = {}));
    var Browser = Device.Browser;
    var Server = Device.Server;
    var Native = Device.Native;
    var canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);
    var canUseNative = typeof navigator != "undefined" && navigator.product == "ReactNative";
    var device = canUseNative ? Native : canUseDOM ? Browser : Server;
    var SSRObject = {
      isBrowser: device === Browser,
      isServer: device === Server,
      isNative: device === Native,
      device,
      canUseWorkers: typeof Worker !== "undefined",
      canUseEventListeners: device === Browser && !!window.addEventListener,
      canUseViewport: device === Browser && !!window.screen
    };
    var assign = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return args.reduce(function(acc, obj) {
        return __assign(__assign({}, acc), obj);
      }, {});
    };
    var values = function(obj) {
      return Object.keys(obj).map(function(key) {
        return obj[key];
      });
    };
    var toArrayObject = function() {
      return assign((values(SSRObject), SSRObject));
    };
    var useSSRObject = toArrayObject();
    exports.weAreServer = function() {
      SSRObject.isServer = true;
      useSSRObject = toArrayObject();
    };
    exports.useSSR = function() {
      return useSSRObject;
    };
    exports.default = exports.useSSR;
  }
});

// node_modules/react-useportal/dist/usePortal.js
var require_usePortal = __commonJS({
  "node_modules/react-useportal/dist/usePortal.js"(exports) {
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __rest = exports && exports.__rest || function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = require_react();
    var react_dom_1 = require_react_dom();
    var use_ssr_1 = __importDefault(require_useSSR());
    exports.errorMessage1 = "You must either add a `ref` to the element you are interacting with or pass an `event` to openPortal(e) or togglePortal(e) when the `programmaticallyOpen` option is not set to `true`.";
    function usePortal(_a) {
      if (_a === void 0) {
        _a = {};
      }
      var _b = _a.closeOnOutsideClick, closeOnOutsideClick = _b === void 0 ? true : _b, _c = _a.closeOnEsc, closeOnEsc = _c === void 0 ? true : _c, bindTo = _a.bindTo, _d = _a.isOpen, defaultIsOpen = _d === void 0 ? false : _d, onOpen = _a.onOpen, onClose = _a.onClose, onPortalClick = _a.onPortalClick, _e = _a.programmaticallyOpen, programmaticallyOpen = _e === void 0 ? false : _e, eventHandlers = __rest(_a, ["closeOnOutsideClick", "closeOnEsc", "bindTo", "isOpen", "onOpen", "onClose", "onPortalClick", "programmaticallyOpen"]);
      var _f = use_ssr_1.default(), isServer = _f.isServer, isBrowser = _f.isBrowser;
      var _g = react_1.useState(defaultIsOpen), isOpen = _g[0], makeOpen = _g[1];
      var open = react_1.useRef(isOpen);
      var setOpen = react_1.useCallback(function(v) {
        open.current = v;
        makeOpen(v);
      }, []);
      var targetEl = react_1.useRef();
      var portal = react_1.useRef(isBrowser ? document.createElement("div") : null);
      react_1.useEffect(function() {
        if (isBrowser && !portal.current)
          portal.current = document.createElement("div");
      }, [isBrowser, portal]);
      var elToMountTo = react_1.useMemo(function() {
        if (isServer)
          return;
        return bindTo && react_dom_1.findDOMNode(bindTo) || document.body;
      }, [isServer, bindTo]);
      var createCustomEvent = function(e) {
        if (!e)
          return { portal, targetEl, event: e };
        var event = e || {};
        if (event.persist)
          event.persist();
        event.portal = portal;
        event.targetEl = targetEl;
        event.event = e;
        var currentTarget = e.currentTarget;
        if (!targetEl.current && currentTarget && currentTarget !== document)
          targetEl.current = event.currentTarget;
        return event;
      };
      var customEventHandlers = Object.entries(eventHandlers).reduce(function(acc, _a2) {
        var handlerName = _a2[0], eventHandler = _a2[1];
        acc[handlerName] = function(event) {
          if (isServer)
            return;
          eventHandler(createCustomEvent(event));
        };
        return acc;
      }, {});
      var openPortal = react_1.useCallback(function(e) {
        if (isServer)
          return;
        var customEvent = createCustomEvent(e);
        if (targetEl.current == null && !programmaticallyOpen) {
          setTimeout(function() {
            return setOpen(true);
          }, 0);
          throw Error(exports.errorMessage1);
        }
        if (onOpen)
          onOpen(customEvent);
        setOpen(true);
      }, [isServer, portal, setOpen, targetEl, onOpen]);
      var closePortal = react_1.useCallback(function(e) {
        if (isServer)
          return;
        var customEvent = createCustomEvent(e);
        if (onClose && open.current)
          onClose(customEvent);
        if (open.current)
          setOpen(false);
      }, [isServer, onClose, setOpen]);
      var togglePortal = react_1.useCallback(function(e) {
        return open.current ? closePortal(e) : openPortal(e);
      }, [closePortal, openPortal]);
      var handleKeydown = react_1.useCallback(function(e) {
        return e.key === "Escape" && closeOnEsc ? closePortal(e) : void 0;
      }, [closeOnEsc, closePortal]);
      var handleOutsideMouseClick = react_1.useCallback(function(e) {
        var containsTarget = function(target) {
          return target.current.contains(e.target);
        };
        if (containsTarget(portal) || e.button !== 0 || !open.current || targetEl.current && containsTarget(targetEl))
          return;
        if (closeOnOutsideClick)
          closePortal(e);
      }, [isServer, closePortal, closeOnOutsideClick, portal]);
      var handleMouseDown = react_1.useCallback(function(e) {
        if (isServer || !(portal.current instanceof HTMLElement))
          return;
        var customEvent = createCustomEvent(e);
        if (portal.current.contains(customEvent.target) && onPortalClick)
          onPortalClick(customEvent);
        handleOutsideMouseClick(e);
      }, [handleOutsideMouseClick]);
      var eventListeners = react_1.useRef({});
      react_1.useEffect(function() {
        if (isServer)
          return;
        if (!(elToMountTo instanceof HTMLElement) || !(portal.current instanceof HTMLElement))
          return;
        var eventHandlerMap = {
          onScroll: "scroll",
          onWheel: "wheel"
        };
        var node = portal.current;
        elToMountTo.appendChild(portal.current);
        Object.entries(eventHandlerMap).forEach(function(_a2) {
          var handlerName = _a2[0], eventListenerName = _a2[1];
          if (!eventHandlers[handlerName])
            return;
          eventListeners.current[handlerName] = function(e) {
            return eventHandlers[handlerName](createCustomEvent(e));
          };
          document.addEventListener(eventListenerName, eventListeners.current[handlerName]);
        });
        document.addEventListener("keydown", handleKeydown);
        document.addEventListener("mousedown", handleMouseDown);
        return function() {
          Object.entries(eventHandlerMap).forEach(function(_a2) {
            var handlerName = _a2[0], eventListenerName = _a2[1];
            if (!eventHandlers[handlerName])
              return;
            document.removeEventListener(eventListenerName, eventListeners.current[handlerName]);
            delete eventListeners.current[handlerName];
          });
          document.removeEventListener("keydown", handleKeydown);
          document.removeEventListener("mousedown", handleMouseDown);
          elToMountTo.removeChild(node);
        };
      }, [isServer, handleOutsideMouseClick, handleKeydown, elToMountTo, portal]);
      var Portal = react_1.useCallback(function(_a2) {
        var children = _a2.children;
        if (portal.current != null)
          return react_dom_1.createPortal(children, portal.current);
        return null;
      }, [portal]);
      return Object.assign([openPortal, closePortal, open.current, Portal, togglePortal, targetEl, portal], __assign(__assign({
        isOpen: open.current,
        openPortal,
        ref: targetEl,
        closePortal,
        togglePortal,
        Portal,
        portalRef: portal
      }, customEventHandlers), { bind: __assign({ ref: targetEl }, customEventHandlers) }));
    }
    exports.default = usePortal;
  }
});
export default require_usePortal();
//# sourceMappingURL=react-useportal.js.map
